plugins {
    id "io.freefair.lombok" version "8.6"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.ajoberstar.grgit' version '5.2.2'
//    id "com.palantir.revapi" version "1.7.0"
    id 'net.neoforged.gradle.userdev' version '7.0.142'
}

apply plugin: 'maven-publish'
apply plugin: 'eclipse'

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false')
def getVersion = {
    def raw = grgit.describe(commit: 'HEAD', longDescr: true, tags: true)
    def desc = (raw == null ? '0.0-0-unknown' : grgit.describe(commit: 'HEAD', longDescr: true, tags: true)).split('-') as List
    System.out.println(desc)
    def hash = desc.remove(desc.size() - 1).substring(1)
    def offset = desc.remove(desc.size() - 1)
    return project.mod_version.replace('x', offset) + (System.getenv("GITHUB_RUN_NUMBER") == null ? "+${hash}" : "+${System.getenv("GITHUB_RUN_NUMBER")}")
}

System.out.println(JavaVersion.current())

version = "MC${minecraft_version}-${getVersion()}"
group = "com.tterrag.registrate"
archivesBaseName = "Registrate"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
/*
revapi {
    oldGroup = project.group
    oldName = project.archivesBaseName
    oldVersion = 'MC1.18.2-1.0.25'
    tasks.revapiAnalyze.dependsOn reobf
}
*/

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.test
        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file('run')
    }

    server {
        workingDirectory project.file('run/server')
        programArguments '--nogui'
    }

    data {
        workingDirectory project.file('run')

        programArguments.addAll '--mod', 'testmod', '--all', '--output', rootProject.file('src/generated/resources/').getAbsolutePath(), '--existing', rootProject.file('src/test/resources').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        name = 'tterrag'
        url = 'https://maven.tterrag.com/'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testRuntimeOnly    "org.junit.jupiter:junit-jupiter-engine:5.7.2"
}

lombok {
    version = "1.18.30"
}

delombok {
    format = [
        'suppressWarnings': 'skip',
        'javaLangAsFQN': 'skip'
    ]
}

jar {
    exclude('assets/**', 'data/**', '.cache/**') // Exclude generated assets, can't find a better way to do this :(
    manifest {
        attributes(
            'FMLModType': 'GAMELIBRARY'
        )
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.delombokTask
    exclude 'com.tterrag.registrate.test.*'
}

javadoc {
    source = delombok
    configure (options) {
        tags(
           'apiNote:a:API Note:',
           'implNote:a:Implementation Note:'
        )
    }
}

publishing {
    tasks.publish.dependsOn 'build'
    tasks.publishToMavenLocal.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }

        def mavenToken = System.getenv("MAVEN_TOKEN")
        if (mavenToken != null && !mavenToken.isEmpty()) {
            maven {
                url = "https://maven.ithundxr.dev/snapshots"
                credentials {
                    username = "registrate-fork-github"
                    password = mavenToken
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://repo.maven.apache.org/maven2'
        name 'Maven Central'
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Chisel ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>")
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>")
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}
